/**
 */
package update.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import update.util.UpdateAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class UpdateItemProviderAdapterFactory extends UpdateAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public UpdateItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.UpdateSurface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UpdateSurfaceItemProvider updateSurfaceItemProvider;

	/**
	 * This creates an adapter for a {@link update.UpdateSurface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUpdateSurfaceAdapter() {
		if (updateSurfaceItemProvider == null) {
			updateSurfaceItemProvider = new UpdateSurfaceItemProvider(this);
		}

		return updateSurfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.LinkField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkFieldItemProvider linkFieldItemProvider;

	/**
	 * This creates an adapter for a {@link update.LinkField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkFieldAdapter() {
		if (linkFieldItemProvider == null) {
			linkFieldItemProvider = new LinkFieldItemProvider(this);
		}

		return linkFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.InputInstalment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputInstalmentItemProvider inputInstalmentItemProvider;

	/**
	 * This creates an adapter for a {@link update.InputInstalment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputInstalmentAdapter() {
		if (inputInstalmentItemProvider == null) {
			inputInstalmentItemProvider = new InputInstalmentItemProvider(this);
		}

		return inputInstalmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.PrepareList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrepareListItemProvider prepareListItemProvider;

	/**
	 * This creates an adapter for a {@link update.PrepareList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrepareListAdapter() {
		if (prepareListItemProvider == null) {
			prepareListItemProvider = new PrepareListItemProvider(this);
		}

		return prepareListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.ConditionInstalment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionInstalmentItemProvider conditionInstalmentItemProvider;

	/**
	 * This creates an adapter for a {@link update.ConditionInstalment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionInstalmentAdapter() {
		if (conditionInstalmentItemProvider == null) {
			conditionInstalmentItemProvider = new ConditionInstalmentItemProvider(this);
		}

		return conditionInstalmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.TableSelection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableSelectionItemProvider tableSelectionItemProvider;

	/**
	 * This creates an adapter for a {@link update.TableSelection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableSelectionAdapter() {
		if (tableSelectionItemProvider == null) {
			tableSelectionItemProvider = new TableSelectionItemProvider(this);
		}

		return tableSelectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.InnerjoinRels} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InnerjoinRelsItemProvider innerjoinRelsItemProvider;

	/**
	 * This creates an adapter for a {@link update.InnerjoinRels}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInnerjoinRelsAdapter() {
		if (innerjoinRelsItemProvider == null) {
			innerjoinRelsItemProvider = new InnerjoinRelsItemProvider(this);
		}

		return innerjoinRelsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.LeftOuterJoinRels} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LeftOuterJoinRelsItemProvider leftOuterJoinRelsItemProvider;

	/**
	 * This creates an adapter for a {@link update.LeftOuterJoinRels}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLeftOuterJoinRelsAdapter() {
		if (leftOuterJoinRelsItemProvider == null) {
			leftOuterJoinRelsItemProvider = new LeftOuterJoinRelsItemProvider(this);
		}

		return leftOuterJoinRelsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.RightOuterJoinRels} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RightOuterJoinRelsItemProvider rightOuterJoinRelsItemProvider;

	/**
	 * This creates an adapter for a {@link update.RightOuterJoinRels}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRightOuterJoinRelsAdapter() {
		if (rightOuterJoinRelsItemProvider == null) {
			rightOuterJoinRelsItemProvider = new RightOuterJoinRelsItemProvider(this);
		}

		return rightOuterJoinRelsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.FullOuterJoinRels} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FullOuterJoinRelsItemProvider fullOuterJoinRelsItemProvider;

	/**
	 * This creates an adapter for a {@link update.FullOuterJoinRels}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFullOuterJoinRelsAdapter() {
		if (fullOuterJoinRelsItemProvider == null) {
			fullOuterJoinRelsItemProvider = new FullOuterJoinRelsItemProvider(this);
		}

		return fullOuterJoinRelsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.SortInstalment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SortInstalmentItemProvider sortInstalmentItemProvider;

	/**
	 * This creates an adapter for a {@link update.SortInstalment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSortInstalmentAdapter() {
		if (sortInstalmentItemProvider == null) {
			sortInstalmentItemProvider = new SortInstalmentItemProvider(this);
		}

		return sortInstalmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.FieldSPointer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldSPointerItemProvider fieldSPointerItemProvider;

	/**
	 * This creates an adapter for a {@link update.FieldSPointer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldSPointerAdapter() {
		if (fieldSPointerItemProvider == null) {
			fieldSPointerItemProvider = new FieldSPointerItemProvider(this);
		}

		return fieldSPointerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.MyTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MyTableItemProvider myTableItemProvider;

	/**
	 * This creates an adapter for a {@link update.MyTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMyTableAdapter() {
		if (myTableItemProvider == null) {
			myTableItemProvider = new MyTableItemProvider(this);
		}

		return myTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.Field} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldItemProvider fieldItemProvider;

	/**
	 * This creates an adapter for a {@link update.Field}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldAdapter() {
		if (fieldItemProvider == null) {
			fieldItemProvider = new FieldItemProvider(this);
		}

		return fieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.RealField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RealFieldItemProvider realFieldItemProvider;

	/**
	 * This creates an adapter for a {@link update.RealField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRealFieldAdapter() {
		if (realFieldItemProvider == null) {
			realFieldItemProvider = new RealFieldItemProvider(this);
		}

		return realFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.Literal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LiteralItemProvider literalItemProvider;

	/**
	 * This creates an adapter for a {@link update.Literal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLiteralAdapter() {
		if (literalItemProvider == null) {
			literalItemProvider = new LiteralItemProvider(this);
		}

		return literalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.NullLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NullLiteralItemProvider nullLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link update.NullLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNullLiteralAdapter() {
		if (nullLiteralItemProvider == null) {
			nullLiteralItemProvider = new NullLiteralItemProvider(this);
		}

		return nullLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.Function} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionItemProvider functionItemProvider;

	/**
	 * This creates an adapter for a {@link update.Function}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionAdapter() {
		if (functionItemProvider == null) {
			functionItemProvider = new FunctionItemProvider(this);
		}

		return functionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.FunctionDef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionDefItemProvider functionDefItemProvider;

	/**
	 * This creates an adapter for a {@link update.FunctionDef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionDefAdapter() {
		if (functionDefItemProvider == null) {
			functionDefItemProvider = new FunctionDefItemProvider(this);
		}

		return functionDefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.Input} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputItemProvider inputItemProvider;

	/**
	 * This creates an adapter for a {@link update.Input}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputAdapter() {
		if (inputItemProvider == null) {
			inputItemProvider = new InputItemProvider(this);
		}

		return inputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.InputStringDef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputStringDefItemProvider inputStringDefItemProvider;

	/**
	 * This creates an adapter for a {@link update.InputStringDef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputStringDefAdapter() {
		if (inputStringDefItemProvider == null) {
			inputStringDefItemProvider = new InputStringDefItemProvider(this);
		}

		return inputStringDefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.InputIntDef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputIntDefItemProvider inputIntDefItemProvider;

	/**
	 * This creates an adapter for a {@link update.InputIntDef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputIntDefAdapter() {
		if (inputIntDefItemProvider == null) {
			inputIntDefItemProvider = new InputIntDefItemProvider(this);
		}

		return inputIntDefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.InputDateDef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputDateDefItemProvider inputDateDefItemProvider;

	/**
	 * This creates an adapter for a {@link update.InputDateDef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputDateDefAdapter() {
		if (inputDateDefItemProvider == null) {
			inputDateDefItemProvider = new InputDateDefItemProvider(this);
		}

		return inputDateDefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.InputBitsDef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputBitsDefItemProvider inputBitsDefItemProvider;

	/**
	 * This creates an adapter for a {@link update.InputBitsDef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputBitsDefAdapter() {
		if (inputBitsDefItemProvider == null) {
			inputBitsDefItemProvider = new InputBitsDefItemProvider(this);
		}

		return inputBitsDefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.InputFloatDef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputFloatDefItemProvider inputFloatDefItemProvider;

	/**
	 * This creates an adapter for a {@link update.InputFloatDef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputFloatDefAdapter() {
		if (inputFloatDefItemProvider == null) {
			inputFloatDefItemProvider = new InputFloatDefItemProvider(this);
		}

		return inputFloatDefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.CallSurfaceQuery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CallSurfaceQueryItemProvider callSurfaceQueryItemProvider;

	/**
	 * This creates an adapter for a {@link update.CallSurfaceQuery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCallSurfaceQueryAdapter() {
		if (callSurfaceQueryItemProvider == null) {
			callSurfaceQueryItemProvider = new CallSurfaceQueryItemProvider(this);
		}

		return callSurfaceQueryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.Type} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeItemProvider typeItemProvider;

	/**
	 * This creates an adapter for a {@link update.Type}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeAdapter() {
		if (typeItemProvider == null) {
			typeItemProvider = new TypeItemProvider(this);
		}

		return typeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.Subtype} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubtypeItemProvider subtypeItemProvider;

	/**
	 * This creates an adapter for a {@link update.Subtype}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubtypeAdapter() {
		if (subtypeItemProvider == null) {
			subtypeItemProvider = new SubtypeItemProvider(this);
		}

		return subtypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.Junction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JunctionItemProvider junctionItemProvider;

	/**
	 * This creates an adapter for a {@link update.Junction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJunctionAdapter() {
		if (junctionItemProvider == null) {
			junctionItemProvider = new JunctionItemProvider(this);
		}

		return junctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.RootJunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RootJunctionItemProvider rootJunctionItemProvider;

	/**
	 * This creates an adapter for a {@link update.RootJunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRootJunctionAdapter() {
		if (rootJunctionItemProvider == null) {
			rootJunctionItemProvider = new RootJunctionItemProvider(this);
		}

		return rootJunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.JuncRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JuncRelationshipItemProvider juncRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link update.JuncRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJuncRelationshipAdapter() {
		if (juncRelationshipItemProvider == null) {
			juncRelationshipItemProvider = new JuncRelationshipItemProvider(this);
		}

		return juncRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.Term} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TermItemProvider termItemProvider;

	/**
	 * This creates an adapter for a {@link update.Term}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTermAdapter() {
		if (termItemProvider == null) {
			termItemProvider = new TermItemProvider(this);
		}

		return termItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.EqualLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EqualLinkItemProvider equalLinkItemProvider;

	/**
	 * This creates an adapter for a {@link update.EqualLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEqualLinkAdapter() {
		if (equalLinkItemProvider == null) {
			equalLinkItemProvider = new EqualLinkItemProvider(this);
		}

		return equalLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.GreaterThanLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GreaterThanLinkItemProvider greaterThanLinkItemProvider;

	/**
	 * This creates an adapter for a {@link update.GreaterThanLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGreaterThanLinkAdapter() {
		if (greaterThanLinkItemProvider == null) {
			greaterThanLinkItemProvider = new GreaterThanLinkItemProvider(this);
		}

		return greaterThanLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.GreaterEqualThanLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GreaterEqualThanLinkItemProvider greaterEqualThanLinkItemProvider;

	/**
	 * This creates an adapter for a {@link update.GreaterEqualThanLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGreaterEqualThanLinkAdapter() {
		if (greaterEqualThanLinkItemProvider == null) {
			greaterEqualThanLinkItemProvider = new GreaterEqualThanLinkItemProvider(this);
		}

		return greaterEqualThanLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.LowerThanLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LowerThanLinkItemProvider lowerThanLinkItemProvider;

	/**
	 * This creates an adapter for a {@link update.LowerThanLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLowerThanLinkAdapter() {
		if (lowerThanLinkItemProvider == null) {
			lowerThanLinkItemProvider = new LowerThanLinkItemProvider(this);
		}

		return lowerThanLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.LowerEqualThanLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LowerEqualThanLinkItemProvider lowerEqualThanLinkItemProvider;

	/**
	 * This creates an adapter for a {@link update.LowerEqualThanLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLowerEqualThanLinkAdapter() {
		if (lowerEqualThanLinkItemProvider == null) {
			lowerEqualThanLinkItemProvider = new LowerEqualThanLinkItemProvider(this);
		}

		return lowerEqualThanLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.InLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InLinkItemProvider inLinkItemProvider;

	/**
	 * This creates an adapter for a {@link update.InLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInLinkAdapter() {
		if (inLinkItemProvider == null) {
			inLinkItemProvider = new InLinkItemProvider(this);
		}

		return inLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link update.LikeLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LikeLinkItemProvider likeLinkItemProvider;

	/**
	 * This creates an adapter for a {@link update.LikeLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLikeLinkAdapter() {
		if (likeLinkItemProvider == null) {
			likeLinkItemProvider = new LikeLinkItemProvider(this);
		}

		return likeLinkItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (updateSurfaceItemProvider != null) updateSurfaceItemProvider.dispose();
		if (linkFieldItemProvider != null) linkFieldItemProvider.dispose();
		if (inputInstalmentItemProvider != null) inputInstalmentItemProvider.dispose();
		if (prepareListItemProvider != null) prepareListItemProvider.dispose();
		if (conditionInstalmentItemProvider != null) conditionInstalmentItemProvider.dispose();
		if (tableSelectionItemProvider != null) tableSelectionItemProvider.dispose();
		if (innerjoinRelsItemProvider != null) innerjoinRelsItemProvider.dispose();
		if (leftOuterJoinRelsItemProvider != null) leftOuterJoinRelsItemProvider.dispose();
		if (rightOuterJoinRelsItemProvider != null) rightOuterJoinRelsItemProvider.dispose();
		if (fullOuterJoinRelsItemProvider != null) fullOuterJoinRelsItemProvider.dispose();
		if (sortInstalmentItemProvider != null) sortInstalmentItemProvider.dispose();
		if (fieldSPointerItemProvider != null) fieldSPointerItemProvider.dispose();
		if (myTableItemProvider != null) myTableItemProvider.dispose();
		if (fieldItemProvider != null) fieldItemProvider.dispose();
		if (realFieldItemProvider != null) realFieldItemProvider.dispose();
		if (literalItemProvider != null) literalItemProvider.dispose();
		if (nullLiteralItemProvider != null) nullLiteralItemProvider.dispose();
		if (functionItemProvider != null) functionItemProvider.dispose();
		if (functionDefItemProvider != null) functionDefItemProvider.dispose();
		if (inputItemProvider != null) inputItemProvider.dispose();
		if (inputStringDefItemProvider != null) inputStringDefItemProvider.dispose();
		if (inputIntDefItemProvider != null) inputIntDefItemProvider.dispose();
		if (inputDateDefItemProvider != null) inputDateDefItemProvider.dispose();
		if (inputBitsDefItemProvider != null) inputBitsDefItemProvider.dispose();
		if (inputFloatDefItemProvider != null) inputFloatDefItemProvider.dispose();
		if (callSurfaceQueryItemProvider != null) callSurfaceQueryItemProvider.dispose();
		if (typeItemProvider != null) typeItemProvider.dispose();
		if (subtypeItemProvider != null) subtypeItemProvider.dispose();
		if (junctionItemProvider != null) junctionItemProvider.dispose();
		if (rootJunctionItemProvider != null) rootJunctionItemProvider.dispose();
		if (juncRelationshipItemProvider != null) juncRelationshipItemProvider.dispose();
		if (termItemProvider != null) termItemProvider.dispose();
		if (equalLinkItemProvider != null) equalLinkItemProvider.dispose();
		if (greaterThanLinkItemProvider != null) greaterThanLinkItemProvider.dispose();
		if (greaterEqualThanLinkItemProvider != null) greaterEqualThanLinkItemProvider.dispose();
		if (lowerThanLinkItemProvider != null) lowerThanLinkItemProvider.dispose();
		if (lowerEqualThanLinkItemProvider != null) lowerEqualThanLinkItemProvider.dispose();
		if (inLinkItemProvider != null) inLinkItemProvider.dispose();
		if (likeLinkItemProvider != null) likeLinkItemProvider.dispose();
	}

}
